# -*- coding: utf-8 -*-
"""Stock Price Tracker.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mLFqdIGeK9URoPZUVmlI6hEAPFB5-v7
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile StockPrice.py
# import streamlit as st
# import requests
# import pandas as pd
# import matplotlib.pyplot as plt
# 
# #Set page config
# st.set_page_config(page_title="Stock Prize Tracker", layout="centered")
# st.title("stock Prize tracket App")
# st.write("track historical stock prizes with live chart")
# 
# #Input from User
# symbol = st.text_input("Enter Stock Symbol: ").upper()
# time_range = st.selectbox ("Select Time Range: ", ["Last 5 Years", "Last 1 Year", "Last 6 Months", "Last 1 Month", "Last Week"])
# 
# #Get today's date
# today = pd.Timestamp.now()
# 
# #Filter based on Choice
# if time_range == "Last 5 Years":
#   start_date = today - pd.DateOffset(years=5)
# 
# elif time_range == "Last 1 Year":
#   start_date = today - pd.DateOffset(years=1)
# 
# elif time_range == "Last 6 Months":
#   start_date = today - pd.DateOffset(months=6)
# 
# elif time_range == "Last 1 Month":
#   start_date = today - pd.DateOffset(months=1)
# 
# else:
#   start_date = today - pd.DateOffset(weeks=1)
# 
# #Enter your API details
# API_KEY = "66351QX0KQ8XIC67"
# 
# #Ask for Stock Symbol
# #symbol = input("Enter your Stock Symbol: ").upper()
# 
# #Define API Endpoint
# url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={API_KEY}&outputsize=full"
# 
# #Get the data
# response = requests.get(url)
# data = response.json()
# 
# #Check if response is valid
# if "Time Series (Daily)" in data:
#   daily_data = data["Time Series (Daily)"]
# 
#   #Convert to dataframe
#   df = pd.DataFrame.from_dict(daily_data, orient="index")
#   df = df.rename(columns={
#       "1. open": "Open",
#       "2. high": "High",
#       "3. low": "Low",
#       "4. close": "Close",
#       "5. volume": "Volume"
#   })
# 
#   #Convert index to datetime and sort
#   df.index = pd.to_datetime(df.index)
#   df = df.sort_index()
# 
#   #Convert Columns to Numeric
#   df = df.astype(float)
# 
# 
#   #Filter by selected time range
#   df_filtered = df[df.index >= start_date]
# 
#   st.subheader(f"Closing Prices for {symbol}")
#   st.line_chart(df_filtered["Close"])
# 
#   st.write(f"Average Closing Price:** ${df_filtered['Close'].mean():.2f}")
#   st.write(f"Maximum Closing Price:** ${df_filtered['Close'].max():.2f}")
#   st.write(f"Minimum Closing Price:** ${df_filtered['Close'].min():.2f}")
# 
#   #Show Raw Data Checkbox
#   if st.checkbox("Show Raw Data"):
#       st.write(df_filtered.tail())
# 
# else:
#   st.error("Invalid Stock Symbol")
# 
#